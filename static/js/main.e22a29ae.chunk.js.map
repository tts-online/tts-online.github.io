{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["cookies","Cookies","App","speech","SpeechSynthesisUtterance","txt","React","createRef","m","get","undefined","useState","setting","setSetting","y","className","style","display","marginTop","marginRight","checked","onChange","j","set","current","value","trim","type","text","ref","rows","width","onClick","window","speechSynthesis","speak","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAOMA,EAAU,IAAIC,IAiFLC,MA/Ef,WACE,IAAIC,EAAS,IAAIC,yBAEbC,EAAMC,IAAMC,YAEZC,EAAIR,EAAQS,IAAI,WAElBD,OADQE,IAANF,GAAyB,UAANA,EAKvB,MAA4BG,mBAASH,GAArC,mBAAKI,EAAL,KAAcC,EAAd,KAEIC,EAAI,GAmBR,OAlBIN,QAEQE,KADVI,EAAId,EAAQS,IAAI,WAEdK,EAAI,IAgBN,qBAAKC,UAAU,MAAf,SACE,mCACE,uBACA,gDACA,uBACA,sBAAKC,MAAO,CAACC,QAAS,eAAtB,UACE,mBAAGD,MAAO,CAACE,UAAW,MAAOC,YAAa,QAASJ,UAAU,KAA7D,kCACF,wBAAOA,UAAU,SAAjB,UACE,uBAAOK,QAASZ,EAAGa,SAAU,WAC3B,IAAIC,EACCV,GAOHU,EAAI,QACJtB,EAAQuB,IAAI,OAAQ,MAPpBD,EAAI,OAEgB,KADTjB,EAAImB,QAAQC,MACdC,QACP1B,EAAQuB,IAAI,OAAQlB,EAAImB,QAAQC,QAMpCzB,EAAQuB,IAAI,UAAWD,GACvBT,GAAYD,IACXe,KAAK,aACR,sBAAMZ,UAAU,uBAGlB,uBACA,uBACA,0BAAUM,SACR,WACE,IAAIO,EAAOvB,EAAImB,QAAQC,MACH,KAAhBG,EAAKF,QACHd,GACFZ,EAAQuB,IAAI,OAAQK,IAI1BC,IAAKxB,EAAKyB,KAAK,IAAId,MAAO,CAACe,MAAO,QAAShB,UAAU,eATvD,SASuED,IACvE,uBACA,uBACA,mBAAGC,UAAU,kBAAkBiB,QApDpB,WACf,IAAIJ,EAAOvB,EAAImB,QAAQC,MACH,KAAhBG,EAAKF,QACPvB,EAAOyB,KAAOA,EACdK,OAAOC,gBAAgBC,MAAMhC,KAE7BE,EAAImB,QAAQC,MAAQ,GACpBW,MAAM,kCA6CJ,wBCtEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e22a29ae.chunk.js","sourcesContent":["import './bootstrap.min.css'\nimport './App.css'\n\nimport React, { useState } from 'react'\n\nimport Cookies from 'universal-cookie';\n \nconst cookies = new Cookies();\n\nfunction App() {\n  let speech = new SpeechSynthesisUtterance();\n\n  let txt = React.createRef()\n\n  let m = cookies.get('cookies')\n  if (m === undefined || m === 'false'){\n    m = false\n  } else {\n    m = true\n  }\n  let [setting, setSetting] = useState(m)\n  \n  let y = ''\n  if (m){\n    y = cookies.get('text')\n    if (y === undefined){\n      y = ''\n    }\n  }\n  \n  const playText = ()=>{\n    let text = txt.current.value\n    if (text.trim() !== ''){\n      speech.text = text\n      window.speechSynthesis.speak(speech)\n    } else {\n      txt.current.value = ''\n      alert('You haven\\'t entered any text')\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <center>\n        <br/>\n        <h1>Text to Speech</h1>\n        <br/>\n        <div style={{display: 'inline-flex'}}>\n          <p style={{marginTop: '4px', marginRight: '10px'}} className=\"h5\">Save text in cookies</p>\n        <label className=\"switch\">\n          <input checked={m} onChange={()=>{\n            let j\n            if (!setting){\n              j = 'true'\n              let text = txt.current.value\n              if (text.trim() !== ''){\n                cookies.set('text', txt.current.value)\n              }\n            } else {\n              j = 'false'\n              cookies.set('text', '')\n            }\n            cookies.set('cookies', j)\n            setSetting(!setting)\n          }} type=\"checkbox\"/>\n          <span className=\"slider round\"></span>\n        </label>\n        </div>\n        <br/>\n        <br/>\n        <textarea onChange={\n          ()=>{\n            let text = txt.current.value\n            if (text.trim() !== ''){\n              if (setting){\n                cookies.set('text', text)\n              }\n            }\n          }\n        } ref={txt} rows=\"8\" style={{width: '80vw'}} className=\"form-control\">{y}</textarea>\n        <br/>\n        <br/>\n        <p className=\"btn btn-warning\" onClick={playText}>Play</p>\n      </center>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}